1) Table
2) Role
3) Lambda (Don't forget to import role)
4) Connect Table
5) Making Inline Code
![image](https://user-images.githubusercontent.com/70058068/120980481-4a442800-c794-11eb-8c5d-deeaae63f192.png)
Here,S is just type of primary key
Make it more simpler :: Just reduce this : AWS.config.update({region:'us-east-1'}) and also {apiVersion: '2012-08-10'}
Don't forget to import aws-sdk
This was just funky json syntax
Get Rid of that:
use doc client
![image](https://user-images.githubusercontent.com/70058068/120982342-3ef1fc00-c796-11eb-84ad-94a55195bc8a.png)
Note:: Here, get and put are used.
More Best way ::: 
![image](https://user-images.githubusercontent.com/70058068/120985386-30591400-c799-11eb-8fc7-031de5c5e83d.png)
PUT Requests Handling
 
Remember use key in get and use Item in put(not post)
now it's time for api
6) create API
![image](https://user-images.githubusercontent.com/70058068/121002251-c7c66300-c7a9-11eb-8e4e-0bf0ff85e703.png)
![image](https://user-images.githubusercontent.com/70058068/121002494-065c1d80-c7aa-11eb-95bf-e7ecad4dc529.png)

7)   GET REQUEST
'use strict'
const AWS = require('aws-sdk');

exports.handler =async (event, context, callback)=> {
var dynamodb = new AWS.DynamoDB.DocumentClient();
    
    var params = {
        Key: {
         id:123,
        }, 
        TableName: "testing"
       };
       try{
           const data = await dynamodb.get(params).promise();
           console.log(data);
       }
       catch(err){
           console.log(err);
       }
}
NOTE: Make sure to check use proxy integration
8) MODIFIED GET REQUEST
'use strict'
const AWS = require('aws-sdk');

AWS.config.update({ region: "us-east-1"});
console.log('...........................................')
exports.handler = async (event, context) => {
  console.log('...........................................')
  const ddb = new AWS.DynamoDB({ apiVersion: "2012-10-08"});
  const documentClient = new AWS.DynamoDB.DocumentClient({ region: "us-east-1"});

  let responseBody = "";
  let statusCode = 0;
  const id = parseInt(event.pathParameters.id);

  const params = {
    TableName: "testing",
    Key: {
      id: id
    }
  }
;
  try {
    const data = await documentClient.get(params).promise();
    responseBody = JSON.stringify(data.Item);
    statusCode = 200;
  } catch (err) {
    responseBody = `Unable to get user data`;
    statusCode = 403;
  }

  const response = {
    statusCode: statusCode,
   
    body: responseBody
  }
;
  return response;
}
![image](https://user-images.githubusercontent.com/70058068/121108440-6218bc00-c827-11eb-9883-e430ed25d324.png)
How flow looks like: ![image](https://user-images.githubusercontent.com/70058068/121108502-7c529a00-c827-11eb-8201-9f4ee00e7032.png)
Note:: You may also need to update IAM Roles 
![image](https://user-images.githubusercontent.com/70058068/121108729-e10df480-c827-11eb-8587-e297e8301cef.png)
make new inline policy::![image](https://user-images.githubusercontent.com/70058068/121108887-28948080-c828-11eb-9df3-4f2ec7151fbb.png)

