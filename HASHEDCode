1) Table
2) Role
3) Lambda (Don't forget to import role)
4) Connect Table
5) Making Inline Code
![image](https://user-images.githubusercontent.com/70058068/120980481-4a442800-c794-11eb-8c5d-deeaae63f192.png)
Here,S is just type of primary key
Make it more simpler :: Just reduce this : AWS.config.update({region:'us-east-1'}) and also {apiVersion: '2012-08-10'}
Don't forget to import aws-sdk
This was just funky json syntax
Get Rid of that:
use doc client
![image](https://user-images.githubusercontent.com/70058068/120982342-3ef1fc00-c796-11eb-84ad-94a55195bc8a.png)
Note:: Here, get and put are used.
More Best way ::: 
![image](https://user-images.githubusercontent.com/70058068/120985386-30591400-c799-11eb-8fc7-031de5c5e83d.png)
PUT Requests Handling
 
Remember use key in get and use Item in put(not post)
now it's time for api
6) create API
![image](https://user-images.githubusercontent.com/70058068/121002251-c7c66300-c7a9-11eb-8e4e-0bf0ff85e703.png)
![image](https://user-images.githubusercontent.com/70058068/121002494-065c1d80-c7aa-11eb-95bf-e7ecad4dc529.png)

7)   GET REQUEST
'use strict'
const AWS = require('aws-sdk');

exports.handler =async (event, context, callback)=> {
var dynamodb = new AWS.DynamoDB.DocumentClient();
    
    var params = {
        Key: {
         id:123,
        }, 
        TableName: "testing"
       };
       try{
           const data = await dynamodb.get(params).promise();
           console.log(data);
       }
       catch(err){
           console.log(err);
       }
}
NOTE: Make sure to check use proxy integration
8) MODIFIED GET REQUEST

